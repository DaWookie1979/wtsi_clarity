#! /usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Try::Tiny;
use English qw(-no_match_vars);
use Carp;
use WTSI::DNAP::RabbitMQ::Client;
use wtsi_clarity::mq::message_handler;
use wtsi_clarity::util::config;

use AnyEvent;
use Daemon::Control;

my $message_handler = wtsi_clarity::mq::message_handler->new();
my $config = wtsi_clarity::util::config->new();

my $daemon = Daemon::Control->new(
  name => 'Clarity Message Consumer',
  pid_file => $config->dir_path . '/pid',
  stderr_file => $config->dir_path . '/message_consumer.err',
  stdout_file => $config->dir_path . '/message_consumer.out',
  program => sub {
    ##no critic (InputOutput::RequireCheckedSyscalls)
    my ($dc, $type, $test) = @_;

    my $process_message;

    print {*STDOUT} "Starting...\n";

    if (defined $test && $test eq '--test') {
      print {*STDOUT} "In test mode\n";
      $process_message = sub {
        my $payload = shift;

        if ($payload eq 'croak') {
          croak 'croak';
        } else {
          print {*STDOUT} $payload . "\n";
        }
      };
    } else {
      $process_message = sub { $message_handler->process_message(@_); };
    }

    my $cv = AnyEvent->condvar;

    my $channel_name = 'channel' . $PID;

    my @credentials = (host  => $config->clarity_mq->{'host'},
                        port  => $config->clarity_mq->{'port'},
                        vhost => $config->clarity_mq->{'vhost'},
                        user  => $config->clarity_mq->{'username'},
                        pass  => $config->clarity_mq->{'password'},);

    my $channel;

    my $client = WTSI::DNAP::RabbitMQ::Client->new(
      acking_enabled => 0,
      consume_handler => sub {
        my ($args) = @_;

        try {
          my $body = $args->{'body'};
          $process_message->($body->{'payload'});
          $channel->channel($channel_name)->ack();
        } catch {
          print {*STDERR} $_ . "\n";

          #Â Ensure gets send to DLX
          $channel->channel($channel_name)->reject(
            requeue => 0,
            delivery_tag => $args->{'deliver'}->{'method_frame'}->{'delivery_tag'},
          );
        };
      },
      error_handler => sub {
        print {*STDERR} @_ . "\n";
      }
    );

    $client->connect(@credentials);
    $channel = $client->open_channel(name => $channel_name);
    $client->consume(channel => $channel_name, queue => $config->clarity_mq->{'queue'});

    $cv->recv;
  }
);

$daemon->program_args(\@ARGV);

exit $daemon->run;